# -*- coding: utf-8 -*-
"""
Definition of protocols used in the :mod:`future_number` module.
"""

from typing import Generic, Protocol, TypeVar

T = TypeVar("T", covariant=True)


class SupportsArithmeticOperators(Protocol, Generic[T]):
    """
    Protocol for objects that support arithmetic operators.
    """

    def __add__(self, other: object) -> T: ...
    def __sub__(self, other: object) -> T: ...
    def __mul__(self, other: object) -> T: ...
    def __truediv__(self, other: object) -> T: ...
    def __floordiv__(self, other: object) -> T: ...
    def __mod__(self, other: object) -> T: ...
    def __pow__(self, other: object) -> T: ...


class SupportsRichComparison(Protocol):
    """
    Protocol for objects that support rich comparison operators.
    """

    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...


class SupportBitwiseOperators(Protocol):
    """
    Protocol for objects that support bitwise operators.
    """

    def __and__(self, other: object) -> object: ...
    def __or__(self, other: object) -> object: ...
    def __xor__(self, other: object) -> object: ...
    def __invert__(self) -> object: ...
